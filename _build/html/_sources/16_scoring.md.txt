# Add Scoring

Now we have all our moving part, it's time to reward the player for their efforts, and what better way to reward them, than using scoring.

GameFrame is an event-driven framework, so the easiest way in incorporate scoring it to connect it to various events.

We will be providing the player with both positive and negative scoring events:

- Rescuing an astronaut &rarr; +50 points
- Shooting an asteroid &rarr; + 5 points
- Shooting an astronaut &rarr; -10 points

Lets work out how we can incorporate this into our code.

## Display Score

### Planning

First thing we need to do is find the scoring mechanism. Look to the GameFrame Documentation under the **[Globals variables](documentation.md#globals-variables)** you will see a variable called `SCORE`. We can use this to keep track of the score.

Next we need to work how we can draw numbers onto the screen. Again, referring to the GameFrame Documents you will notice the **[Text Object](documentation.md#text-object)** which specialises in displaying text. The docs also tell us that it is a special type of RoomObject, so we can treat it like a RoomObject. The `__init__()` requires extra arguments when you instantiate a TextObject. The TextObject also has a method to write new text values to the screen.

So we have our two mechanism for recording and displaying the score. Before we start changing the score, lets try to display the current SCORE on the screen.

### Coding

#### `Objects/Hud.py`

In the `Objects` folder **create** a new file called `Hud.py`, then enter the following code:

```{code-block} python
:linenos:
from GameFrame import TextObject, Globals

class Score(TextObject):
    """
    A class for displaying the current score
    """
    def __init__(self, room, x: int, y: int, text=None):
        """
        Intialises the score object
        """         
        # include attributes and methods from TextObject
        TextObject.__init__(self, room, x, y,text)
        
        # set values         
        self.size = 60
        self.font = 'Arial Black'
        self.colour = (255,255,255)
        self.bold = False
        self.update_text()
        
    def update_score(self, change):
        """
        Updates the score and redraws the text
        """
        Globals.SCORE += change
        self.text = str(Globals.SCORE)
        self.update_text()
```

